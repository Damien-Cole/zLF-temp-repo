#!/usr/bin/env python 
"""this defines where interpreter is located, used for portability across different operating systems"""

"""
Measures LF for each galaxy cluster, calculates photoz probability distribution

"""

import os
import sys
import argparse
import numpy as np
import matplotlib.pyplot as plt
import astropy.table as atpy
import astropy.io.fits as pyfits
import astropy.stats as apyStats
from astLib import *
from zCluster import retrievers
from zCluster import PhotoRedshiftEngine
from zCluster import clusters
from zCluster import catalogs
import urllib
import time
import IPython

start=time.time() 
if __name__ == '__main__':
    
    parser = argparse.ArgumentParser("zLF")
    parser.add_argument("catalogFileName", help="""A .fits table or a .csv file with at least the columns 
                        'name', 'RADeg', 'decDeg'.""")
    parser.add_argument("database", help="""The photometric database to use. Options are 'SDSSDR12', 'S82' 
                        (for SDSS DR7 Stripe 82 co-add); 'CFHTLenS'; 'DESDR1' [experimental], 
                        'DESY3' [experimental; requires access to proprietary DES data]; 'PS1' [experimental]; 
                        'DECaLS' (DR8); or the path to a .fits table with columns in the 
                        appropriate format ('ID', 'RADeg', 'decDeg', and magnitude column names in the form 
                        'u_MAG_AUTO', 'u_MAGERR_AUTO' etc.).""")
    parser.add_argument("-o", "--output-directory", dest="outDir", help="""Label to use for the preferred output
                        directory.""", default = "zLFOutput")
    parser.add_argument("-w", "--weights-type", dest="weightsType", help="""Radial weighting type. Options
                        are 'NFW', 'flat', or 'radial' (default: NFW).""", default = 'NFW')
    parser.add_argument("-R", "--max-radius-Mpc", dest="maxRMpc", help="""Maximum radius in Mpc within 
                        which to calculate delta statistic for each cluster (default: 0.5).""", 
                        default = 0.5)
    parser.add_argument("-m", "--mask", dest="mask", help="""Path to mask image (FITS format with WCS)
                        that defines valid survey area.""", default = None)
    parser.add_argument("-a", "--algorithm", dest="algorithm", help="""Algorithm to use for the maximum likelihood
                        redshift. Options are 'max' or 'odds' (default: odds).""", 
                        default = 'odds')
    parser.add_argument("-i", "--max-iter", dest="maxIter", help="""Maximum number of iterations for finding
                        the cluster redshift and optical position based on projected density map (default: 1).""", 
                        default = 1, type = int)
    parser.add_argument("-c", "--cachedir", dest="cacheDir", default = None, help="""Cache directory location
                        (default: $HOME/.zCluster/cache). Downloaded photometric catalogs will be stored 
                        here.""")
    parser.add_argument("-M", "--mpi", dest="MPIEnabled", action="store_true", help="""Enable MPI. If you
                        want to use this, run zLF using something like: mpirun --np 4 zLF ...""", 
                        default = False)
    parser.add_argument("-e", "--max-mag-error", dest="maxMagError", help="""Maximum acceptable 
                        photometric error (in magnitudes; default: 0.25).""", default = 0.25)
    parser.add_argument("-E", "--photometric-zero-point-error", dest="ZPError", type = float, 
                        help="""Global photometric zero point uncertainty in magnitudes, applied to all bands 
                        (default: 0). Added in quadrature to the photometric uncertainties in the catalog.""", 
                        default = 0.0)
    parser.add_argument("-f", "--fit-for-zero-point-offsets", dest="fitZPOffsets", 
                        help="""If the input catalog contains a z_spec column, use those galaxies to fit
                        for magnitude zero point offsets. These will then be applied when estimating galaxy
                        photometric redshifts.""", 
                        default = False, action = "store_true")
    parser.add_argument("-z", "--z-prior-min", dest="zPriorMin", help="""Set minimum redshift of prior.""", 
                        default = None)
    parser.add_argument("-Z", "--z-prior-max", dest="zPriorMax", help="""Set maximum redshift of prior.""", 
                        default = None)
    parser.add_argument("-b", "--brighter-absmag-cut", dest="absMagCut", help="""Set bright absolute magnitude cut.""", 
                        default = -24.)
    parser.add_argument("-n", "--name", dest="name", help="Find photo-z of only the named cluster in the catalog.")
    parser.add_argument("-t", "--templates-directory", dest="templatesDir", help="""Specify a directory containing
                        a custom set of spectral templates.""", 
                        default = None)
    
    parser.add_argument("-W", "--write-galaxy-catalogs", dest="writeGalaxyCatalogs", action="store_true", 
                        help="""Write out a .fits format galaxy catalog and DS9 .reg file for each cluster.""", 
                        default = False)
    parser.add_argument("-P", "--write-plots", dest="writePlots", action="store_true", 
                        help = """Write out a .pdf plot of n(z) for each cluster.""", default = False)
    parser.add_argument("-X", "--add-extra-photometry", dest="addExtraPhoto",
                        help = """If using a user-supplied FITS galaxy photometic catalog, add in additional
                        photometry from the given database (e.g., SDSSDR12, DECaLS - see 'database'),
                        if available.""", default = None)
    parser.add_argument("--min-background-area-Mpc2", dest="minBackgroundAreaMpc2", default = 11, type = float,
                        help="""The minimum area of the background region in square Mpc. Candidate redshifts that have
                        less than this minimum background area will be filtered out of the output catalog (default: 11, 
                        which corresponds to 50%% of the background area for the standard 3-4 Mpc annulus used).""")
    
    parser.add_argument("-A", "--background-area-deg2", dest="bckAreaDeg2", default = None, help="""The area, 
                        in square degrees, covered by the background galaxy catalog given using the -B flag.""")
    parser.add_argument("-C", "--credentials-filename", dest="credentialsFileName", default = None, 
                        help = """The location of a file containing username (first line), password (second line), 
                        for login to e.g., ESO Portal (this option is only currently used for the KIDSDR3
                        database option).""")

    args = parser.parse_args()
    
   
    catalogFileName=args.catalogFileName
    database=args.database
    cacheDir=args.cacheDir
    weightsType=args.weightsType
    templatesDir=args.templatesDir
    maxRMpc=float(args.maxRMpc)
    method=args.algorithm
    MPIEnabled=args.MPIEnabled
    maxMagError=float(args.maxMagError)
    #magsBrighterMStarCut=float(args.magsBrighterMStarCut)
    absMagCut=float(args.absMagCut)
    writeGalaxyCatalogs=args.writeGalaxyCatalogs
    writePlots=args.writePlots
    maskPath=args.mask
    ZPError=args.ZPError
    maxIter=args.maxIter
    
    
    
    # Set-up cache
    if cacheDir is not None:
        if os.path.exists(cacheDir) == False:
            os.makedirs(cacheDir, exist_ok=True)
    else:
        if os.path.exists(retrievers.CACHE_DIR) == False:
                os.makedirs(retrievers.CACHE_DIR, exist_ok = True)
                
     # Set-up where we will write output
    os.makedirs(args.outDir, exist_ok = True)
    outFileName=args.outDir+os.path.sep+"zLF_catalog_%.3f_%.3f.fits"  
    
    # Method for fetching catalogs
    retriever, retrieverOptions, passbandSet=retrievers.getRetriever(database, maxMagError = 0.2)
    photoRedshiftEngine=PhotoRedshiftEngine.PhotoRedshiftEngine(absMagCut, ZPError = ZPError, passbandSet = passbandSet)
    
    bands=photoRedshiftEngine.bands
    bandErrs=[]
    for b in bands:
        bandErrs.append(b+"Err")
    bands=bands+bandErrs
    
    """if database == 'DECaLS':
        # Zero point offsets remove bias from galaxy max likelihood photo-zs when testing on SDSS
        ZPOffsets=np.array([0.02271222, -0.05051711, -0.02465597, -0.00406835, 0.05406105])"""
        
    if cacheDir is not None:
        retrieverOptions['altCacheDir']=cacheDir
      
    
    #Calculating photoz probability distribution
    #Create one combined LF

    clusterCat =atpy.Table().read(catalogFileName)
    
    binEdges =np.linspace(17.0,24.5,num=15)
    binCentres =(binEdges[:1]+binEdges[1:])/2
    compnumGal =np.array(binCentres.shape)
    #RcompnumGal =np.array(binCentres.shape)
    clusterCat=	clusterCat[np.logical_and(clusterCat['redshift']>0.3,clusterCat['redshift']<0.4)]   
    
    for cluster in clusterCat:
               
       #create LF for each cluster and then sum them to get 		composite LF
       
        galaxyCatalog=retriever(cluster['RADeg'],cluster['decDeg'], 				optionsDict = retrieverOptions)
        photoRedshiftEngine.calcPhotoRedshifts(galaxyCatalog, 			calcMLRedshiftAndOdds = False)
        numGal =np.zeros(binCentres.shape) 
        #RnumGal = np.zeros(binCentres.shape)
        
        #R500 for each cluster
        H0 =70
        G =4.30*10**(-9)
        Hz = H0*(np.sqrt(0.3*(1+cluster['redshift']**3)+0.7))
        pc =(3*(Hz**2))/((8*np.pi)*G)
        R500 =np.cbrt(((3/4*np.pi)*cluster['M500'])/(500*pc))  
  
        for galaxy in galaxyCatalog:
            pz_z = galaxy["pz_z"]
            pz = galaxy["pz"]
            mask=np.logical_and(pz_z >cluster["redshift"]-0.1, 
        				pz_z<cluster["redshift"]+0.1) 
            prob= np.trapz(pz[mask], pz_z[mask]) 
            magmask = np.logical_and(galaxy["r"]<=binEdges[1:], 						galaxy["r"]>=binEdges[:-1]) 
            numGal[magmask]= numGal[magmask]+prob
            compnumGal=numGal+compnumGal
            
            
        #R500c
            #H0 =70
            #G =4.30*1e(-9)
            #Hz = H0*np.sqrt(0.3(1+cluster['redshift']**3)+0.7)
            #pc =(3*(Hz**2))/(8*np.pi*G)
            #R500 =np.cbrt(((3/4*np.pi)*cluster['M500'])/500*pc)    
            
        #absolute mag.
            #DA = astCalc.da(cluster["redshift"]) #Angular diameter dist.
            #DL = astCalc.dl(cluster["redshift"])
            #dm= 5*(np.log10(DL*1e5))         
            #rAbsolute = galaxy["r"]-dm               
            #Rmagmask 		=np.logical_and(rAbsolute<=binEdges[1:],rAbsolute>=binEdges[:-1])
            #RnumGal[Rmagmask]=RnumGal[Rmagmask]+prob
            #RcompnumGal =RnumGal +RcompnumGal
            
            		 
            		 	           
            
               
        #need to update/add cluster LFs to empty array
        
        #Plotting LF for cluster
        yerr =np.sqrt(compnumGal)
        fig,ax=plt.subplots()
        ax.errorbar(binCentres,compnumGal,yerr=yerr,fmt='-o',ls='')
        ax.set_xlabel('R-band bins')
        ax.set_ylabel('no. of galaxies')
        #ax.set_title('Plot of no. of galaxies vs R-band bins in each 	 galaxy cluster')
        plt.gca().invert_xaxis()
        plt.semilogy() 
        plt.show()
         
        import IPython
        IPython.embed()
        sys.exit()                                             
        
          
                      
            
                 
#convert observed apparent mags. of galaxies to absolute 		mags. using measured photoz to give distance modulus(m-M)
            
#DA = astCalc.da(cluster["redshift"]) #Angular diameter dist.
#DL = astCalc.dl(cluster["redshift"]) #DL is luminosity dist.
#dm= 5*(np.log10(DL*1e5))         #distance modulus
#rAbsolute = galaxy["r"]-dm               #absolute mags. 
                       
            
               
         
#for LF, use a weight, need to calc luminosities. Calc.r-band mag           
#integrates over pz(redshift prob.), pz_z (redshift)
#steps to calc. LF
#one to specify binning of apparent  r- band magnitude
#one to specify no. of bins
#create 2 blank arrays for these objects  
#figure k-coreections later
#histogram of r-band mags vs no.of galaxies      

    
