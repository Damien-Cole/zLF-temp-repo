#!/usr/bin/env python 
"""this defines where interpreter is located, used for portability across different operating systems"""

"""
Measures LF for each galaxy cluster, combines each LF to make a composite LF binned first in cluster redshift, and then by mass - taking the top 25% and bottom 25% of cluster mass.

"""

import os
import sys
import argparse
import numpy as np
import matplotlib.pyplot as plt
import astropy.table as atpy
import astropy.io.fits as pyfits
import astropy.stats as apyStats
from astLib import *
from zCluster import retrievers
from zCluster import PhotoRedshiftEngine
from zCluster import clusters
from zCluster import catalogs
from astropy.cosmology import FlatLambdaCDM
from collections import Counter
import urllib
import time
import pyccl as ccl
from scipy import interpolate

#defining functions

#M200 to R200 calc. (taken from NEMO)  
        
#------------------------------------------------------------------------------------------------------------
Om0=0.3
Ob0=0.05
H0=70
sigma8=0.8
ns=0.95
transferFunction="boltzmann_camb"

fiducialCosmoModel=ccl.Cosmology(Omega_c=Om0-Ob0, Omega_b=Ob0, h=0.01*H0, sigma8=sigma8, n_s=ns,
                                transfer_function=transferFunction)

M200mDef=ccl.halos.MassDef(200, "matter", c_m_relation = 'Bhattacharya13')
M200cDef=ccl.halos.MassDef(200, "critical", c_m_relation = 'Bhattacharya13')
M500cDef=ccl.halos.MassDef(500, "critical")

#------------------------------------------------------------------------------------------------------------
def calcRDeltaMpc(z, MDelta, cosmoModel, delta = 500, wrt = 'critical'):
    """Calculate RDelta (e.g., R500c, R200m etc.) in Mpc, for a halo with the given mass and redshift.
    Args:
        z (float): Redshift.
        MDelta (float): Halo mass in units of solar masses, using the definition set by `delta` and `wrt`.
        cosmoModel (:obj:`pyccl.Cosmology`): Cosmology object.
        delta (float, optional): Overdensity (e.g., typically 500 or 200).
        wrt (str, optional): Use 'critical' or 'mean' to set the definition of density with respect to the
            critical density or mean density at the given redshift.
    Returns:
        RDelta (in Mpc)
    """

    if type(MDelta) == str:
        raise Exception("MDelta is a string - use, e.g., 1.0e+14 (not 1e14 or 1e+14)")

    Ez=ccl.h_over_h0(cosmoModel, 1/(1+z))
    if wrt == 'critical':
        wrtDensity=ccl.physical_constants.RHO_CRITICAL*(Ez*cosmoModel['h'])**2
    elif wrt == 'mean':
        wrtDensity=ccl.omega_x(cosmoModel, 1/(1+z), 'matter')*ccl.physical_constants.RHO_CRITICAL*(Ez*cosmoModel['h'])**2
    else:
        raise Exception("wrt should be either 'critical' or 'mean'")
    RDeltaMpc=np.power((3*MDelta)/(4*np.pi*delta*wrtDensity), 1.0/3.0)

    return RDeltaMpc

#-------------------------------------------------------------------------------------------------------------

#K-correction code from Hilton et al. (2013) - Spitzer LFs k-correction
#-------------------------------------------------------------------------------------------------------------
def calcKCorrectionSpline(channel, bandToCorrectTo, zf = 3.0, zToCorrectTo = 0.01, magType = "AB", model = "BC03"):
#def applyKCorrection(magArray, redshift, channel, bandToCorrectTo, zf = 3.0, zToCorrectTo = 0.01, magType = "AB", model = "BC03"):
    """K-correction code from Hilton et al. (2013) for Spitzer LFs, gives consistent results with De Propris but note its assuming:

    mag_rest = mag_obs + KCorr

    which is opposite convention to De Propris, and might be non-standard.

    K-correcting to the same K-filter as De Propris assumes (BC03 K Johnson filter)

    Assuming the same model as De Propris et al. 2007 (see above)

    NOTE: Updated Feb 2012, added bandToCorrectTo, which will break old code. But will stop us blindly converting
    to K-band when we mean to K-correct to CH1 at a different z (as in LFsRedux).

    """

    # Look for previously saved results, if not generate K-correction file
    outDir="ancillaryData/KCorrections"
    os.makedirs(outDir, exist_ok = True)
    
    outFileName=outDir+os.path.sep+"KCorr_%sTo%s_zf%.1f_zToCorrectTo%.2f_%s_%s.npz" % (channel, bandToCorrectTo, zf, zToCorrectTo, magType, model)   #write to cache directory
    
    
    if os.path.exists(outFileName) == False:

        print("... calculating K-correction ...")
        if model == 'BC03':
            m=astSED.BC03Model("ancillaryData/BC03Models/tau0p1Gyr_m62.20")
        elif model == 'M05':
            m=astSED.M05Model(os.environ['HOME']+os.path.sep+"Astro_Software/Maraston_Models/CSPs/Salpeter/csp_e0.10_z02_salp.sed_agb")

        if channel == "CH1":
            IRACPassband=astSED.Passband("/ancillaryData/filters/080924ch1trans_full.txt", inputUnits = 'microns')
        elif channel == "CH2":
            IRACPassband=astSED.Passband("ancillaryData/filters/080924ch2trans_full.txt", inputUnits = 'microns')
        elif channel == "K":
            #IRACPassband=astSED.Passband("ancillaryData/filters/K_Johnson.res")
            IRACPassband=astSED.Passband("ancillaryData/filters/K_2MASS.res")
        elif channel == 'r':
            IRACPassband=astSED.Passband("ancillaryData/filters/decam.r.am1p4.dat.txt")
        elif bandToCorrectTo == "R":
            IRACPassband=astSED.Passband("ancillaryData/filters/filt_bessel_R.dat", inputUnits = 'nanometres')

        if bandToCorrectTo == "CH1":
            targetBand=astSED.Passband("ancillaryData/filters/080924ch1trans_full.txt", inputUnits = 'microns')
        elif bandToCorrectTo == "CH2":
            targetBand=astSED.Passband("ancillaryData/filters/080924ch2trans_full.txt", inputUnits = 'microns')
        elif bandToCorrectTo == "K":
            targetBand=astSED.Passband("ancillaryData/filters/K_2MASS.res")
        elif bandToCorrectTo == "R":
            targetBand=astSED.Passband("ancillaryData/filters/filt_bessel_R.dat", inputUnits = 'nanometres')
        elif bandToCorrectTo == "r":
            targetBand=astSED.Passband("ancillaryData/filters/decam.r.am1p4.dat.txt")
        else:
            raise Exception("didn't understand bandToCorrectTo")

        zRange=np.arange(0.0, zf, 0.025)
        KCorrArray=[]
        for z in zRange:
            s0=m.getSED(astCalc.tl(zf)-astCalc.tl(z), z = zToCorrectTo)
            s1=m.getSED(astCalc.tl(zf)-astCalc.tl(z), z = z)
            KCorrArray.append(s0.calcMag(targetBand, addDistanceModulus = False, magType = magType)- \
                              s1.calcMag(IRACPassband, addDistanceModulus = False, magType = magType))
        KCorrArray=np.array(KCorrArray)

        np.savez(outFileName, zRange, KCorrArray)
    else:
        stuff=np.load(outFileName)
        zRange=stuff['arr_0']
        KCorrArray=stuff['arr_1']

    tck=interpolate.splrep(zRange, KCorrArray)

    return tck
    #magArray=magArray+KCorr # yes, I'm opposite way round to De Propris

    #return magArray
"""Could write function to return interpolater and include k-correcting in code """
#------------------------------------------------------------------------------------------------------------



start=time.time() 
if __name__ == '__main__':
    
    parser = argparse.ArgumentParser("zLFMass")
    parser.add_argument("catalogFileName", help="""A .fits table or a .csv file with at least the columns 
                        'name', 'RADeg', 'decDeg'.""")
    parser.add_argument("database", help="""The photometric database to use. Options are 'SDSSDR12', 'S82' 
                        (for SDSS DR7 Stripe 82 co-add); 'CFHTLenS'; 'DESDR1' [experimental], 
                        'DESY3' [experimental; requires access to proprietary DES data]; 'PS1' [experimental]; 
                        'DECaLS' (DR8); or the path to a .fits table with columns in the 
                        appropriate format ('ID', 'RADeg', 'decDeg', and magnitude column names in the form 
                        'u_MAG_AUTO', 'u_MAGERR_AUTO' etc.).""")
    parser.add_argument("-o", "--output-directory", dest="outDir", help="""Label to use for the preferred output
                        directory.""", default = "zLFOutput")
    parser.add_argument("-w", "--weights-type", dest="weightsType", help="""Radial weighting type. Options
                        are 'NFW', 'flat', or 'radial' (default: NFW).""", default = 'NFW')
    parser.add_argument("-R", "--max-radius-Mpc", dest="maxRMpc", help="""Maximum radius in Mpc within 
                        which to calculate delta statistic for each cluster (default: 0.5).""", 
                        default = 0.5)
    parser.add_argument("-m", "--mask", dest="mask", help="""Path to mask image (FITS format with WCS)
                        that defines valid survey area.""", default = None)
    parser.add_argument("-a", "--algorithm", dest="algorithm", help="""Algorithm to use for the maximum likelihood
                        redshift. Options are 'max' or 'odds' (default: odds).""", 
                        default = 'odds')
    parser.add_argument("-i", "--max-iter", dest="maxIter", help="""Maximum number of iterations for finding
                        the cluster redshift and optical position based on projected density map (default: 1).""", 
                        default = 1, type = int)
    parser.add_argument("-c", "--cachedir", dest="cacheDir", default = None, help="""Cache directory location
                        (default: $HOME/.zCluster/cache). Downloaded photometric catalogs will be stored 
                        here.""")
    parser.add_argument("-M", "--mpi", dest="MPIEnabled", action="store_true", help="""Enable MPI. If you
                        want to use this, run zLF using something like: mpirun --np 4 zLF ...""", 
                        default = False)
    parser.add_argument("-e", "--max-mag-error", dest="maxMagError", help="""Maximum acceptable 
                        photometric error (in magnitudes; default: 0.25).""", default = 0.25)
    parser.add_argument("-E", "--photometric-zero-point-error", dest="ZPError", type = float, 
                        help="""Global photometric zero point uncertainty in magnitudes, applied to all bands 
                        (default: 0). Added in quadrature to the photometric uncertainties in the catalog.""", 
                        default = 0.0)
    parser.add_argument("-f", "--fit-for-zero-point-offsets", dest="fitZPOffsets", 
                        help="""If the input catalog contains a z_spec column, use those galaxies to fit
                        for magnitude zero point offsets. These will then be applied when estimating galaxy
                        photometric redshifts.""", 
                        default = False, action = "store_true")
    parser.add_argument("-z", "--z-prior-min", dest="zPriorMin", help="""Set minimum redshift of prior.""", 
                        default = None)
    parser.add_argument("-Z", "--z-prior-max", dest="zPriorMax", help="""Set maximum redshift of prior.""", 
                        default = None)
    parser.add_argument("-b", "--brighter-absmag-cut", dest="absMagCut", help="""Set bright absolute magnitude cut.""", 
                        default = -24.)
    parser.add_argument("-n", "--name", dest="name", help="Find photo-z of only the named cluster in the catalog.")
    parser.add_argument("-t", "--templates-directory", dest="templatesDir", help="""Specify a directory containing
                        a custom set of spectral templates.""", 
                        default = None)
    
    parser.add_argument("-W", "--write-galaxy-catalogs", dest="writeGalaxyCatalogs", action="store_true", 
                        help="""Write out a .fits format galaxy catalog and DS9 .reg file for each cluster.""", 
                        default = False)
    parser.add_argument("-P", "--write-plots", dest="writePlots", action="store_true", 
                        help = """Write out a .pdf plot of n(z) for each cluster.""", default = False)
    parser.add_argument("-X", "--add-extra-photometry", dest="addExtraPhoto",
                        help = """If using a user-supplied FITS galaxy photometic catalog, add in additional
                        photometry from the given database (e.g., SDSSDR12, DECaLS - see 'database'),
                        if available.""", default = None)
    parser.add_argument("--min-background-area-Mpc2", dest="minBackgroundAreaMpc2", default = 11, type = float,
                        help="""The minimum area of the background region in square Mpc. Candidate redshifts that have
                        less than this minimum background area will be filtered out of the output catalog (default: 11, 
                        which corresponds to 50%% of the background area for the standard 3-4 Mpc annulus used).""")
    
    parser.add_argument("-A", "--background-area-deg2", dest="bckAreaDeg2", default = None, help="""The area, 
                        in square degrees, covered by the background galaxy catalog given using the -B flag.""")
    parser.add_argument("-C", "--credentials-filename", dest="credentialsFileName", default = None, 
                        help = """The location of a file containing username (first line), password (second line), 
                        for login to e.g., ESO Portal (this option is only currently used for the KIDSDR3
                        database option).""")
    parser.add_argument("-zLower", dest ="zLowerlim", default= None, type = float, help="""The lower redshift bound for the chosen cluster redshift range """)
    parser.add_argument("-zUpper", dest= "zUpperlim", default=None, type = float, help="""The upper redshift bound for the chosen cluster redshift range  """)
    parser.add_argument("-lnum", dest= "leftnc", default=0, type = int, help="""left-endpoint for number of clusters to use if using slicing  """)
    parser.add_argument("-rnum", dest= "rightnc", default=None, type = int, help="""right-endpoint for number of clusters to use if using slicing  """)
    
    
    args = parser.parse_args()
    
   
    catalogFileName=args.catalogFileName
    database=args.database
    cacheDir=args.cacheDir
    weightsType=args.weightsType
    templatesDir=args.templatesDir
    maxRMpc=float(args.maxRMpc)
    method=args.algorithm
    MPIEnabled=args.MPIEnabled
    maxMagError=float(args.maxMagError)
    #magsBrighterMStarCut=float(args.magsBrighterMStarCut)
    absMagCut=float(args.absMagCut)
    writeGalaxyCatalogs=args.writeGalaxyCatalogs
    writePlots=args.writePlots
    maskPath=args.mask
    ZPError=args.ZPError
    maxIter=args.maxIter
    zLowerlim=args.zLowerlim
    zUpperlim=args.zUpperlim
    leftnc=args.leftnc
    rightnc=args.rightnc
    
    # Set-up cache
    if cacheDir is not None:
        if os.path.exists(cacheDir) == False:
            os.makedirs(cacheDir, exist_ok=True)
    else:
        if os.path.exists(retrievers.CACHE_DIR) == False:
                os.makedirs(retrievers.CACHE_DIR, exist_ok = True)
                
    # Set-up where we will write output
    os.makedirs(args.outDir, exist_ok = True)
    outFileName=args.outDir+os.path.sep+"zLF_catalog_%.3f_%.3f.fits"  
    
    # Method for fetching catalogs
    retriever, retrieverOptions, passbandSet=retrievers.getRetriever(database, maxMagError = 0.2)
    photoRedshiftEngine=PhotoRedshiftEngine.PhotoRedshiftEngine(absMagCut, ZPError = ZPError, passbandSet = passbandSet)
    
    bands=photoRedshiftEngine.bands
    bandErrs=[]
    for b in bands:
        bandErrs.append(b+"Err")
    bands=bands+bandErrs
    
    """if database == 'DECaLS':
        # Zero point offsets remove bias from galaxy max likelihood photo-zs when testing on SDSS
        ZPOffsets=np.array([0.02271222, -0.05051711, -0.02465597, -0.00406835, 0.05406105])"""
        
    if cacheDir is not None:
        retrieverOptions['altCacheDir']=cacheDir
        
        
        
    
    """Measuring cluster LFs"""

    clusterCat =atpy.Table().read(catalogFileName)         #catalogFileName is given argument by user
    
    
    binEdges =np.linspace(17.0,22.5,num=28)                #old was num=12 #adopted BMcut=22.5 from cluster mag. distribution
                                                           #possibly for higher redshifts use 23.0
    binCentres =(binEdges[:-1]+binEdges[1:])/2
    
    lowMcompnumGal=np.zeros(binCentres.shape)              #composite LF for low mass binCentres
    highMcompnumGal=np.zeros(binCentres.shape)             #composite LF for high mass binCentres
    
    
    
    """import IPython
    IPython.embed()
    sys.exit()"""
    
    
    comprichnessN = np.zeros(binCentres.shape)             #empty array for richness weighting
    #R200deglist=[]
    
    
    
    """redshift binning of clusters - based on user input & optional slicing"""
    clusterCat=clusterCat[np.logical_and(clusterCat['redshift']>zLowerlim,clusterCat['redshift']<zUpperlim)][leftnc:rightnc]
    #clusterCentz = (clusterCat["redshift"].min()+clusterCat["redshift"].max())/2
    clusterCentz =(zLowerlim+zUpperlim)/2
    
    
    """mass binning withing redshift bin - rank cluster mass and choose top 25% and bottom 25% as high mass and low mass bins"""
    clusMass=np.sort(clusterCat['M200m'])
    Mind=int(0.25*len(clusMass))            #index to use to select low mass and high mass subsets
    lowMass=clusMass[:Mind]
    highMass=clusMass[-Mind:]
    
    
    """import IPython
    IPython.embed()
    sys.exit()"""
    
    
   
    print("...fetching sub-sample clusters...")
    
    #lists for low mass and high mass subsets
    lowMrichnesslist = []    #list method
    highMrichnesslist=[]
    
    lowMnumGallist=[]
    highMnumGallist=[]
    
    lowMsigma= []         #blank list for sum of uncertainties Nij/richness
    highMsigma=[]
    
    lowmasslist=[]
    highmasslist=[]
    
    lowM_Absmaglist=[]
    highM_Absmaglist=[]
    
    lowM_memgalz=[]
    highM_memgalz=[]
    
     #table lists
    lowMclusterlist=[]
    lowMclusterz=[]
    
    highMclusterlist=[]
    highMclusterz=[]
    
    lowRA=[]
    lowdec=[]
    
    highRA=[]
    highdec=[]
    
    lowR200deg=[]
    highR200deg=[]
    
    #debugging for catalogs
    """import IPython
    IPython.embed()
    sys.exit()"""
    
    kCorrSpl = calcKCorrectionSpline('r', 'r', zf = 3.0, zToCorrectTo = clusterCentz, magType = "AB", model = "BC03")
    
   
    for cluster in clusterCat:
         
        """low mass binned LF compiling"""  
        if cluster['M200m']<= lowMass.max():
            
            
            
            #create low mass bin LF for each cluster and then sum them to get composite LF
            print("...fetching galaxy catalogs for low mass clusters...")
            galaxyCatalog=retriever(cluster['RADeg'],cluster['decDeg'], optionsDict = retrieverOptions)
        
            if galaxyCatalog is None:
                continue
        
            print("...calculating photozs...")
            photoRedshiftEngine.calcPhotoRedshifts(galaxyCatalog, calcMLRedshiftAndOdds = True)   
        
            numGal =np.zeros(binCentres.shape)                 #array number of galaxies in each cluster
            R200m = calcRDeltaMpc(cluster['redshift'],cluster['M200m']*1e14,fiducialCosmoModel, delta=200, wrt='mean') 
        
            """converting R200m to degrees""" 
            cluster_dA=astCalc.da(cluster['redshift'])
            R200rad = R200m/cluster_dA
            R200deg = np.rad2deg(R200rad)
            
       
            richness =0                                        #richness variable for comp. LF
            Tabrich =[]                                        #richness list for cluster table, including 0 richness
       
       
            KCorr=interpolate.splev(cluster['redshift'], kCorrSpl)
    
  
            for galaxy in galaxyCatalog:
            
                """calculate rDeg for galaxies"""
                rDeg = astCoords.calcAngSepDeg(galaxy['RADeg'],galaxy['decDeg'],cluster['RADeg'], cluster['decDeg'])
            
                #calc absolute magnitudes
                DA = astCalc.da(cluster["redshift"])           #Angular diameter distance
                DL = astCalc.dl(cluster["redshift"])           #Luminosity distance
                dm= 5*(np.log10(DL*1e5))                       #distance modulus
                absR = galaxy["r"]-dm                          #R-band absolute mag. 
                absRlim = -20
            
            
                """Cluster members cut-off""" 
                print("...selecting cluster members within R200deg...")
                if rDeg < R200deg:
                
                    pz_z = galaxy["pz_z"]                      
                    pz = galaxy["pz"]
                
                
                    mask=np.logical_and(pz_z >cluster["redshift"]-0.1, 
                            pz_z<cluster["redshift"]+0.1)
                            
                
                    prob= np.trapz(pz[mask], pz_z[mask])
                
                    galaxy['r'] = galaxy['r']+KCorr
                
                    Appmagmask =np.logical_and(galaxy["r"]<=binEdges[1:], galaxy["r"]>=binEdges[:-1]) 
                    numGal[Appmagmask]= numGal[Appmagmask]+prob
                
                    
                    if absR < absRlim:
                    
                        richness= richness+prob                #richnessN[i]=richnessN[i]+prob (array method)
                        lowM_Absmaglist.append(absR)
                        
                    
                    
            Tabrich.append(richness)                           #for cluster table
            
        
        
            """list method for richness and number of galaxies per cluster"""
            if richness>0:  #to get rid of clusters with 0 richness
                
                
                lowMclusterlist.append(cluster['name'])
                lowMclusterz.append(round(cluster['redshift'],4))
                lowmasslist.append(round(cluster['M200m'],4))
                lowRA.append(round(cluster['RADeg'],4))
                lowdec.append(round(cluster['decDeg'],4))
                lowR200deg.append(round(R200deg,4))
                
                lowM_memgalz.append(int(numGal.sum()))
            
    
                numGalratio=numGal/richness
                
                lowMrichnesslist.append(int(richness))
                lowMnumGallist.append(numGalratio)
                
                
            
                """uncertainties"""
                deltaNij= np.sqrt(numGal)                          #Poisson error for each cluster in bin
                Sigmaratio =(deltaNij/richness)**2
                lowMsigma.append(Sigmaratio)
                
                """import IPython
                IPython.embed()
                sys.exit()"""
                
        
        
        """high mass bin LF compiling"""
        if cluster['M200m']>= highMass.min():
            
            
            #create high mass bin LF for each cluster and then sum them to get composite LF
            print("...fetching galaxy catalogs for high mass clusters...")
            galaxyCatalog=retriever(cluster['RADeg'],cluster['decDeg'], optionsDict = retrieverOptions)
        
            if galaxyCatalog is None:
                continue
        
            print("...calculating photozs...")
            photoRedshiftEngine.calcPhotoRedshifts(galaxyCatalog, calcMLRedshiftAndOdds = True)   
        
            numGal =np.zeros(binCentres.shape)                 #array number of galaxies in each cluster
            R200m = calcRDeltaMpc(cluster['redshift'],cluster['M200m']*1e14,fiducialCosmoModel, delta=200, wrt='mean') 
        
            """converting R200m to degrees""" 
            cluster_dA=astCalc.da(cluster['redshift'])
            R200rad = R200m/cluster_dA
            R200deg = np.rad2deg(R200rad)
        
       
            richness =0                                        #richness variable for comp. LF
            Tabrich =[]                                        #richness list for cluster table, including 0 richness
       
       
            KCorr=interpolate.splev(cluster['redshift'], kCorrSpl)
    
  
            for galaxy in galaxyCatalog:
            
                """calculate rDeg for galaxies"""
                rDeg = astCoords.calcAngSepDeg(galaxy['RADeg'],galaxy['decDeg'],cluster['RADeg'], cluster['decDeg'])
            
                #calc absolute magnitudes
                DA = astCalc.da(cluster["redshift"])           #Angular diameter distance
                DL = astCalc.dl(cluster["redshift"])           #Luminosity distance
                dm= 5*(np.log10(DL*1e5))                       #distance modulus
                absR = galaxy["r"]-dm                          #R-band absolute mag. 
                absRlim = -20
            
            
                """Cluster members cut-off""" 
                print("...selecting cluster members within R200deg...")
                if rDeg < R200deg:
                
                    pz_z = galaxy["pz_z"]                      
                    pz = galaxy["pz"]
                
                
                    mask=np.logical_and(pz_z >cluster["redshift"]-0.1, 
                            pz_z<cluster["redshift"]+0.1)
                            
                
                    prob= np.trapz(pz[mask], pz_z[mask])
                
                    galaxy['r'] = galaxy['r']+KCorr
                
                    Appmagmask =np.logical_and(galaxy["r"]<=binEdges[1:], galaxy["r"]>=binEdges[:-1]) 
                    numGal[Appmagmask]= numGal[Appmagmask]+prob
                
                    
                    if absR < absRlim:
                    
                        richness= richness+prob                #richnessN[i]=richnessN[i]+prob (array method)
                        highM_Absmaglist.append(absR)
                    
                    
            Tabrich.append(richness)                           #for cluster table
            
    
        
        
            """list method for richness and number of galaxies per cluster"""
            if richness>0:  #to get rid of clusters with 0 richness
                
                highMclusterlist.append(cluster['name'])
                highMclusterz.append(round(cluster['redshift'],4))
                highmasslist.append(round(cluster['M200m'],4))
                highRA.append(round(cluster['RADeg'],4))
                highdec.append(round(cluster['decDeg'],4))
                highR200deg.append(round(R200deg,4))
                
                highM_memgalz.append(int(numGal.sum()))
                
            
    
                numGalratio=numGal/richness
                
                highMrichnesslist.append(int(richness))
                highMnumGallist.append(numGalratio)
                
            
                """uncertainties"""
                deltaNij= np.sqrt(numGal)                          #Poisson error for each cluster in bin
                Sigmaratio =(deltaNij/richness)**2
                highMsigma.append(Sigmaratio)
                
                """import IPython
                IPython.embed()
                sys.exit()"""
            
            
                        
            
    
    """converting lists to arrays for low mass subset"""
    lowMnumGalArr=np.array(lowMnumGallist)
    lowMrichnessArr=np.array(lowMrichnesslist)
    lowmassArr=np.array(lowmasslist)
    #numGalArr=numGalArr/richness
    
    low_Nc0 = lowMrichnessArr.sum()
    low_mj = len(lowMrichnessArr)                        #no. of clusters in bin, use richnessArr since some clus. have 0 rich. 
    low_Ncj = (low_Nc0/low_mj)*lowMnumGalArr.sum(axis=0)            #no. of galaxies in jth bin of comp. LF
    lowMcompnumGal=lowMcompnumGal+low_Ncj 
    
    #format lowMcompnumGal
    lowM_Ntot = []
    for i in lowMcompnumGal:
        numG=format(i, '.65f')
        lowM_Ntot.append(numG) 
    
    #uncertainties for low mass subset
    lowMsigmaArr=np.array(lowMsigma)
    lowM_Nerr = (low_Nc0/low_mj)*np.sqrt(lowMsigmaArr.sum(axis=0))                #errorbars for low mass compnumGal
    
    
    
    
    
    
    """converting lists to arrays for high mass subset"""
    highMnumGalArr=np.array(highMnumGallist)
    highMrichnessArr=np.array(highMrichnesslist)
    highmassArr=np.array(highmasslist)
    
    high_Nc0 = highMrichnessArr.sum()
    high_mj = len(highMrichnessArr)
    high_Ncj = (high_Nc0/high_mj)*highMnumGalArr.sum(axis=0)
    highMcompnumGal=highMcompnumGal+high_Ncj
    
    #format highMcompnumGal
    highM_Ntot = []
    for i in highMcompnumGal:
        numG=format(i, '.65f')
        highM_Ntot.append(numG)
        
    #uncertainties for low mass subset
    highMsigmaArr=np.array(highMsigma)
    highM_Nerr = (high_Nc0/high_mj)*np.sqrt(highMsigmaArr.sum(axis=0))          #errorbars for high mass compnumGal
    
    
    """import IPython
    IPython.embed()
    sys.exit()"""
        
    
    
    #table columns
    #some bins in compnumGal have nothing in them - remove from compnumGal for SF table
    #bin >0.1 since some bins have values ~ 0 but not 0
    #low mass subset
    SFlowM_numGal=[]
    for i in lowMcompnumGal:
        if i >= 1.0:
            SFlowM_numGal.append(i)
            
    SFlowM_Nerr=[]  
    SFlowM_BinCent=[]
    for j in range(len(lowMcompnumGal)):
        if lowMcompnumGal[j]>=1.0:
            SFlowM_Nerr.append(lowM_Nerr[j])
            SFlowM_BinCent.append(binCentres[j])
    
    
    #high mass subset
    SFhighM_numGal=[]
    for i in highMcompnumGal:
        if i >= 1.0:
            SFhighM_numGal.append(i)
            
    SFhighM_Nerr=[]  
    SFhighM_BinCent=[]
    for j in range(len(highMcompnumGal)):
        if highMcompnumGal[j]>=1.0:
            SFhighM_Nerr.append(highM_Nerr[j])
            SFhighM_BinCent.append(binCentres[j])
            
    
            
    
    
    
    """import IPython
    IPython.embed()
    sys.exit()"""
        
    
    """Writing out some tables"""
    
    #table of cluster details - some clusters may have 0 richness
    #low mass cluster table
    tab1=atpy.Table()
    tab1['cluster name']=lowMclusterlist
    tab1['RA (deg)']=lowRA
    tab1['dec (deg) ']=lowdec
    tab1['redshift']=lowMclusterz
    tab1['R200 (deg)']=lowR200deg
    tab1['Cluster mass']=lowmasslist
    tab1['No. of member galaxies']=lowMrichnessArr
    tab1.write('zLFMass-lowM_Clustertable'+str(zLowerlim)+'_'+'z'+'_'+str(zUpperlim)+'for'+str(len(lowMrichnessArr))+'clusters'+'.fits',overwrite=True)
    
    
    #high mass cluster table
    tab2=atpy.Table()
    tab2['cluster name']=highMclusterlist
    tab2['RA (deg)']=highRA
    tab2['dec (deg) ']=highdec
    tab2['redshift']=highMclusterz
    tab2['R200 (deg)']=highR200deg
    tab2['Cluster mass']=highmasslist
    tab2['No. of member galaxies']=highMrichnessArr
    tab2.write('zLFMass-highM_Clustertable'+str(zLowerlim)+'_'+'z'+'_'+str(zUpperlim)+'for'+str(len(highMrichnessArr))+'clusters'+'.fits',overwrite=True)
    
    
    #low mass table with LF data for apparent mag.
    tab3 = atpy.Table()
    tab3['mr'] = binCentres
    tab3['N']= lowMcompnumGal
    tab3['Nerr']= lowM_Nerr
    tab3.write('zLFMass-lowM_LFtable'+str(zLowerlim)+'_'+'z'+'_'+str(zUpperlim)+'for'+str(len(lowMrichnessArr))+'clusters'+'.fits',overwrite=True)
    
    #high mass table with LF data for apparent mag.
    tab4 = atpy.Table()
    tab4['mr'] = binCentres
    tab4['N']= highMcompnumGal
    tab4['Nerr']= highM_Nerr
    tab4.write('zLFMass-highM_LFtable'+str(zLowerlim)+'_'+'z'+'_'+str(zUpperlim)+'for'+str(len(highMrichnessArr))+'clusters'+'.fits',overwrite=True)
    
    #low masstable for SF fit - no bins with 0 or no values
    tab5= atpy.Table()
    tab5['mr'] = SFlowM_BinCent
    tab5['N']= SFlowM_numGal
    tab5['Nerr']= SFlowM_Nerr
    tab5.write('lowM_SF-LFtable'+str(zLowerlim)+'_'+'z'+'_'+str(zUpperlim)+'for'+str(len(lowMrichnessArr))+'clusters'+'.fits',overwrite=True)
    
    #high masstable for SF fit - no bins with 0 or no values
    tab6 = atpy.Table()
    tab6['mr'] = SFhighM_BinCent
    tab6['N']= SFhighM_numGal
    tab6['Nerr']= SFhighM_Nerr
    tab6.write('highM_SF-LFtable'+str(zLowerlim)+'_'+'z'+'_'+str(zUpperlim)+'for'+str(len(highMrichnessArr))+'clusters'+'.fits',overwrite=True)
    #need to add meta data
    

    #tab.meta['z']
    
    

    #Print some stats
    print("Number of clusters in bin:",len(clusterCat))           #print the number of clusters
    print("Actual number of clusters contributing to low mass subset:", len(lowMrichnessArr))
    print("Actual number of clusters contributing to high mass subset:", len(highMrichnessArr))
    print("Cluster redshifts:", clusterCat["redshift"])                  #print cluster redshifts
    print("Clusters mass for low subset:", lowMass)
    print("Clusters mass for high subset:",highMass)
    print("Abs. mag. list for low mass subset",lowM_Absmaglist)
    print("Abs. mag list for high mass subset", highM_Absmaglist)
    
    
    #Plotting LFs
    print("...plotting LF for low mass subset...")
    yerr =lowM_Nerr
    fig,ax=plt.subplots()
    ax.errorbar(binCentres,lowMcompnumGal,yerr=yerr,fmt='-o',ls='', label='low mass subset:'+str(round(lowmassArr.min(),2))+'< M200m <'+str(round(lowmassArr.max(),2)))
    ax.legend()
    ax.set_xlabel('r (AB)')                                #apparent r-band mags.       
    ax.set_ylabel('N')                                     #no. of galaxies in each magnitude bin per cluster
    ax.set_title('Composite LF for'+' '+str(len(lowMrichnessArr))+' '+'clusters:'+ str(zLowerlim) +'< z <'+str(zUpperlim))
    plt.ylim(0.1, 10000)
    plt.gca().invert_xaxis()
    plt.semilogy() 
    #plt.savefig('test.png')
    plt.show()
    
    
    print("...plotting LF for high mass subset...")
    yerr =highM_Nerr
    fig,ax=plt.subplots()
    ax.errorbar(binCentres,highMcompnumGal,yerr=yerr,fmt='-o',ls='', label='high mass subset:'+str(round(highmassArr.min(),2))+"< M200m <"+str(round(highmassArr.max(),2)))
    ax.legend()
    ax.set_xlabel('r (AB)')                                #apparent r-band mags.       
    ax.set_ylabel('N')                                     #no. of galaxies in each magnitude bin per cluster
    ax.set_title('Composite LF for'+' '+str(len(highMrichnessArr))+' '+'clusters:'+ str(zLowerlim) +'< z <'+str(zUpperlim))
    plt.ylim(0.1, 10000)
    plt.gca().invert_xaxis()
    plt.semilogy() 
    #plt.savefig('test.png')
    plt.show()
       
       
    print("...plotting LF for high mass subset...")
    yerr1=lowM_Nerr
    yerr2 =highM_Nerr
    fig,ax=plt.subplots()
    ax.errorbar(binCentres,lowMcompnumGal,yerr=yerr1,fmt='-o',ls='--', color='r',label='low mass subset')
    ax.errorbar(binCentres,highMcompnumGal,yerr=yerr2,fmt='-o',ls=':', color='b',label='high mass subset')
    ax.legend()
    ax.set_xlabel('r (AB)')                                #apparent r-band mags.       
    ax.set_ylabel('N')                                     #no. of galaxies in each magnitude bin per cluster
    ax.set_title('Mass LF for'+' '+str(len(highMrichnessArr)+len(lowMrichnessArr))+' '+'clusters:'+ str(zLowerlim) +'< z <'+str(zUpperlim))
    plt.ylim(0.1, 10000)
    plt.gca().invert_xaxis()
    plt.semilogy() 
    #plt.savefig('test.png')
    plt.show()
       
    #Add this for debugging
    import IPython
    IPython.embed()
    sys.exit()
        
    #volume-limited sample for richness
    #dist. mod
        
    #need an array for rAbsolute

   


"""Extra stuff and Notes   """

#convert observed apparent mags. of galaxies to absolute mags. using measured photoz to give distance   modulus(m-M)
             
#DA = astCalc.da(cluster["redshift"]) Angular diameter dist.
#DL = astCalc.dl(cluster["redshift"]) DL is luminosity dist.
#dm= 5*(np.log10(DL*1e5))             distance modulus
#rAbsolute = galaxy["r"]-dm           absolute mags. 
             
        
        
              
#absolute mag.
#DA = astCalc.da(cluster["redshift"]) #Angular diameter dist.
#DL = astCalc.dl(cluster["redshift"])
#dm= 5*(np.log10(DL*1e5))         
#rAbsolute = galaxy["r"]-dm               
#Rmagmask =np.logical_and(rAbsolute<=binEdges[1:],rAbsolute>=binEdges[:-1])
#RnumGal[Rmagmask]=RnumGal[Rmagmask]+prob
#RcompnumGal =RnumGal +RcompnumGal
            
            		 
            		 	           
                 
#convert observed apparent mags. of galaxies to absolute mags. using measured photoz to give distance modulus(m-M)
            
#DA = astCalc.da(cluster["redshift"]) #Angular diameter dist.
#DL = astCalc.dl(cluster["redshift"]) #DL is luminosity dist.
#dm= 5*(np.log10(DL*1e5))             #distance modulus
#rAbsolute = galaxy["r"]-dm           #absolute mags. 
                       
                    
#for LF, use a weight, need to calc luminosities. Calc.r-band mag           
#integrates over pz(redshift prob.), pz_z (redshift)
#steps to calc. LF
#one to specify binning of apparent  r- band magnitude
#one to specify no. of bins
#create 2 blank arrays for these objects  
#figure k-coreections later
#histogram of r-band mags vs no.of galaxies      

    
