#!/usr/bin/env python

"""Schechter function fitting for composite LFs """

import os
import sys
import argparse
import numpy as np
import matplotlib.pyplot as plt
import astropy.table as atpy
import astropy.io.fits as pyfits
from scipy.optimize import fmin
import time


"""Define Schechter function - predicted model"""
#------------------------------------------------------------------------------------------------------------
def schechterm(params, magnitude):
    """Schechter luminosity function by magnitudes."""
    """params = mstar,alpha, ###phiStar"""
    
    mstarMinm = 0.4 *(params[0]- magnitude) 
    return (0.4 * np.log(10) * (10.0)**(mstarMinm * (params[1] + 1.)) * np.exp(-10.**(mstarMinm)))
#------------------------------------------------------------------------------------------------------------

"""Chi-squared function"""
#------------------------------------------------------------------------------------------------------------
def get_chisq(params,obsLF,phiStar):
    model = phiStar*schechterm(params,obsLF['mr'])
    dY=obsLF['N']-model
    return (np.sum((dY/obsLF['Nerr'])**2))
#------------------------------------------------------------------------------------------------------------


start=time.time() 
if __name__ == '__main__':
    
    parser = argparse.ArgumentParser("SchechterLFs")
    parser.add_argument("LFfileName", help="""A .fits table with LF details: r-band mag. bins - 'mr', no. of galaxies - 'N' & poisson errors - 'Nerr'""")
    
    args = parser.parse_args()
    LFfileName=args.LFfileName
    
    obsLF =atpy.Table().read(LFfileName)
    
    """import IPython
    IPython.embed()
    sys.exit()"""
    
    """initial params & model fit"""
    params = 18.96, -0.96                   #mstar, alpha guesses
    modelmr=np.linspace(17.0,22.5,num=12)
    y = schechterm(params,modelmr)
    phiStar = (np.sum(obsLF['N']))/(np.sum(y))
    modelN=phiStar*schechterm(params,modelmr)
    
                
    chisq=get_chisq(params,obsLF,phiStar)
    #fmin(get_chisq, params, args=(obsLF,phiStar))
    
    """Brute-force fitting"""
    ntest = 100
    mstar = np.linspace(17.0,22.5,ntest)
    alpha = np.linspace(-2.0, 2.0, ntest)
    chisq = np.zeros((ntest,ntest))
    
    for i in range(ntest):
        for j in range(ntest):
            chisq[i,j]=get_chisq((mstar[i],alpha[j]),obsLF, phiStar)
    
    prob = np.exp(-0.5*chisq)
    
    #best values
    i,j = np.unravel_index(prob.argmax(),prob.shape)
    #print(mstar[i],alpha[j])
    newparams = mstar[i],alpha[j]
    modelmr=np.linspace(17.0,22.5,1000)
    new_y=schechterm(newparams, modelmr)
    #phiStar = np.sum(obsLF['N'])/np.sum(y)
    new_modelN = phiStar*schechterm(newparams,modelmr)
    plt.errorbar(obsLF['mr'], obsLF['N'], yerr=obsLF['Nerr'], fmt='ro')
    plt.plot(modelmr,new_modelN)
    plt.xlabel(r"$m_{r}$")
    plt.ylabel("N")
    plt.title("Composite LF:0.20 < z < 0.25")
    plt.ylim(5)
    plt.xlim(16.5,22.5)
    plt.semilogy()
    plt.gca().invert_xaxis()
    plt.show()
    print("Phistar:",phiStar)
    print("alpha:",alpha[j])
    print("mstar:",mstar[i])
    
    
    """Fmin new params
    newparams=fmin(get_chisq, params, args=(obsLF,phiStar))[0], fmin(get_chisq, params, args=(obsLF,phiStar))[1]
    modelmr=np.linspace(17.0,22.5,num=1000)
    new_y = schechterm(newparams,modelmr)
    new_modelN=phiStar*schechterm(newparams,modelmr)

    
    plt.rc('axes', labelsize=14)
    plt.rc('axes',labelweight='bold')
    plt.rc('axes',titlesize=16)
    plt.rc('axes', titleweight='bold')
    plt.rc('font', family='sans-serif')
    plt.rcParams['figure.figsize']=(10,7)
    
    
    plt.errorbar(obsLF['mr'],obsLF['N'],yerr=obsLF['Nerr'],fmt='ro')
    plt.plot(modelmr,new_modelN)
    plt.xlabel(r"$m_{r}$")
    plt.ylabel("N")
    plt.ylim(5)
    plt.xlim(16.5,22.5)
    plt.gca().invert_xaxis()
    plt.semilogy()
    plt.show()"""
    
    
    import IPython
    IPython.embed()
    sys.exit()
    
    
    
